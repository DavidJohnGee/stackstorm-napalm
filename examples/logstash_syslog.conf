input {
	syslog {
		port => 6969
	}
}

filter {

	# Strip down the logsource to correct hostname (Juniper routers tag the
	# routing engine on the end for example.)
	mutate {
		gsub => [
						"logsource", "-re\d", "",
						"logsource", "lo0-", ""
						]
	}

	# First match changes Cisco log file messages, removing the timestamp and
	# grabbing the process and pid from the log.
	# Second line handles juniper log files where the program catches the Virtual
	# router name by mistake.
	grok {
		match => { "message" => "%{CISCOTIMESTAMP} : %{NOTSPACE:program}\[%{NOTSPACE:pid}\]: %%{NOTSPACE:cisco_error} : %{GREEDYDATA:message}" }
		match => { "message" => "%{NOTSPACE:program}\[%{NOTSPACE:pid}\]: %{GREEDYDATA:message}" }
		overwrite => [ "message", "program", "pid" ]
	}

	# Handle the BGP prefix trigger syslog here, pull out neighbour and AS number.
	grok {
		match           => { "message" => "BGP_PREFIX_THRESH_EXCEEDED: %{IPV4:neighbour} \(External AS %{INT:asnum}\): Configured maximum prefix-limit threshold\(%{INT}\) exceeded for inet-unicast nlri: %{INT:prefixes}" }
		add_tag         => ["prefix_exceeded"]
		add_field       => [ "received_at", "%{@timestamp}"]
	}
}

output {
	elasticsearch {
		hosts => [ "localhost:9200" ]
	}

	# Here send the BGP syslog output to the stackstorm webhook.
	# Stackstorm is running on the same host here, change the URL for your own
	# host.
	if "prefix_exceeded" in [tags] {
		http {
			url => "http://localhost:9101/api/v1/webhooks/napalm_bgp_prefix_exceeded"
			http_method => "post"
		}
	}
	file {
		path => "/var/log/logstash/syslog.log"
	}
}
