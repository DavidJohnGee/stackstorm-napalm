input {
  udp {
    port => 6969
    codec => "json"
    type => "rsyslog"
  }
}

filter {

  # Strip down the logsource to correct hostname (Juniper routers tag the
  # routing engine on the end for example.)
  mutate {
    gsub => [
            "logsource", "-re\d", "",
            "logsource", "lo0-", ""
            ]
    # Remove leading whitespace from message.
    strip => ["message"]
  }

  grok {
    # Cisco log file messages, remove the timestamp, extract the process and pid.
    match => { "message" => "%{CISCOTIMESTAMP} : %{NOTSPACE:program}\[%{NOTSPACE:pid}\]: %%{NOTSPACE:cisco_tag} : %{GREEDYDATA:message}" }
    # Juniper logs where a virtual router name gets parsed into program by mistake.
    match => { "message" => "%{NOTSPACE:program}\[%{NOTSPACE:pid}\]: %{GREEDYDATA:message}" }
    overwrite => [ "message", "program", "pid" ]
  }

  # Handle the BGP prefix trigger syslog here, pull out neighbour and AS number. This one is a JunOS message
  grok {
    match           => { "message" => "BGP_PREFIX_THRESH_EXCEEDED: %{IPV4:neighbour} \(External AS %{INT:asnum}\): Configured maximum prefix-limit threshold\(%{INT}\) exceeded for inet-unicast nlri: %{INT:prefixes}" }
    add_tag         => ["prefix_exceeded"]
    add_field        => { "os_type" => "junos" }
  }

  # Handle configuration changes, one per device type.
  grok {
    match           => { "message" => "UI_COMMIT: User '%{USERNAME:username}' requested 'commit' operation \(comment: %{NOTSPACE:comment}\)" }
    add_tag         => ["configuration_change"]
    add_field        => { "os_type" => "junos" }
  }

  grok {
    match           => { "message" => "Configuration committed by user '%{USERNAME:username}'. Use 'show configuration commit changes %{INT:commit_id}' to view the changes" }
    add_tag         => ["configuration_change"]
    add_field        => { "os_type" => "iosxr" }
  }

  mutate {
    remove_tag => [ "_grokparsefailure" ]
  }
}

output {
  elasticsearch {
    hosts => [ "localhost:9200" ]
  }

  # Here send the BGP syslog output to the stackstorm webhook.
  # Stackstorm is running on the same host here, change the URL for your own
  # host.
  if "prefix_exceeded" in [tags] {
    http {
      url => "http://localhost:9101/v1/webhooks/napalm_bgp_prefix_exceeded"
      http_method => "post"
    }
  }

  if "configuration_change" in [tags] {
    http {
      url => "http://localhost:9101/v1/webhooks/napalm_conf_change"
      http_method => "post"
    }
  }

# Enable for debugging
#  file {
#    path => "/var/log/logstash/syslog.log"
#  }
}
